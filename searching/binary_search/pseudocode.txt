Explanation:

Binary search which is a Divide and Conquer algorithm. 
Like all divide-and-conquer algorithms, binary search first divides a large array into two smaller subarrays and then 
recursively (or iteratively) operate the subarrays. But instead of working on both subarrays, it discards one subarray and 
continues on the second subarray. This decision of discarding one subarray is made in just one comparison.

So binary search reduces the search space to half at each step. By search space, we mean a subarray of the given array 
where the target value is located (if present in the array). Initially, the search space is the entire array, and binary 
search redefines the search space at every step of the algorithm by using the property of the array that it is sorted. 
It does so by comparing the mid-value in the search space to the target value. If the target value matches the middle 
element, its position in the array is returned; otherwise, it discards half of the search space based on the comparison 
result. It assumes array is sorted

Pseudocode:

nums = [2, 3, 5, 7, 8, 10, 12, 15, 18, 20]
target = 7

start = 0
end = nums_size - 1

1)If target = nums[mid], return mid.

2)If target < nums[mid], discard all elements in the right search space, including the middle element, i.e., nums[mid…high]. 
Now our new high would be mid-1.

3)If target > nums[mid], discard all elements in the left search space, including the middle element, i.e., 
nums[low…mid]. Now our new low would be mid+1.

Conclusion:

Binary Search is used for finding the location of an element in a linear array.

It is a fast, efficient, and accurate search algorithm that can work on big and small datasets.

It works only on Sorted arrays.

Binary search uses the divide and conquer technique.

The time complexity for binary search is:

Best Case - O(1)
Worst Case - O(logn)
Average Case - O(logn)

The space complexity for binary search is:

recursive approach - O(logn)
iterative approach - O(1)
